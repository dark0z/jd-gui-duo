buildscript {
    repositories {
        mavenCentral()
		maven {
			url 'https://jitpack.io'
		}
    }
    dependencies {
		classpath 'com.github.TheBoegl:gradle-launch4j:2.4.9'
    }
}

apply plugin: 'java'
apply plugin: 'edu.sc.seis.launch4j'

createExe {
  mainClassName = 'org.jd.gui.App'
  icon = "${projectDir}/src/launch4j/resources/images/jd-gui.ico"
}

// Common configuration //
rootProject.version='1.6.6'
rootProject.ext.set('jdCoreVersion', '1.1.3')
targetCompatibility = '1.8'

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    tasks.withType(JavaCompile) {
        sourceCompatibility = targetCompatibility = '1.8'
        options.compilerArgs << '-Xlint:deprecation'
        options.compilerArgs << '-Xlint:unchecked'
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenCentral()
        maven {
        	url 'https://raw.githubusercontent.com/yuweijun/bin/master/repository'
        }
        maven {
        	url 'https://jitpack.io'
        }
    }

    configurations {
        provided
        compile.extendsFrom provided
    }
    
}

// 'cleanIdea' task extension //
cleanIdea.doFirst {
    delete project.name + '.iws'
    delete 'out'
    followSymlinks = true
}

// All in one JAR file //
subprojects.each { subproject ->
    evaluationDependsOn(subproject.path)
}

jar {
    dependsOn subprojects.tasks['jar']

    // Add SPI directory
    def tmpSpiDir = file('build/tmp/spi')
    from tmpSpiDir
    // Add dependencies
    def deps = []
    subprojects.each { subproject ->
        from subproject.sourceSets.main.output.classesDirs
        from subproject.sourceSets.main.output.resourcesDir
        deps += subproject.configurations.runtime - subproject.configurations.provided - subproject.configurations.compileOnly
    }
    subprojects.each { subproject ->
        deps -= subproject.jar.archivePath
    }
    deps = deps.unique().collect { it.isDirectory() ? it : zipTree(it) }
    from deps

    manifest {
        attributes 'Main-Class': 'org.jd.gui.App',
                'SplashScreen-Image': 'org/jd/gui/images/jd_icon_128.png',
                'JD-GUI-Version': project.version,
                'JD-Core-Version': project.jdCoreVersion
    }
    exclude 'META-INF/licenses/**', 'META-INF/maven/**', 'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.RSA'
    exclude '**/ErrorStrip_*.properties', '**/RSyntaxTextArea_*.properties', '**/RTextArea_*.properties'
    exclude '**/FocusableTip_*.properties', '**/RSyntaxTextArea_License.txt'
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    doFirst {
        // Create SPI directory
        tmpSpiDir.deleteDir()
        def tmpSpiServicesDir = file(tmpSpiDir.path + '/META-INF/services')
        tmpSpiServicesDir.mkdirs()
        // Copy and merge SPI config files
        subprojects.each { subproject ->
            def servicesDir = file(subproject.sourceSets.main.output.resourcesDir.path + '/META-INF/services')
            if (servicesDir.exists()) {
                servicesDir.eachFile { serviceFile ->
                    def target = file(tmpSpiServicesDir.path + '/' + serviceFile.name)
                    target << serviceFile.text
                }
            }
        }
    }
}

